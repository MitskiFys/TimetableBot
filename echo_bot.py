from datetime import datetime, timedelta
import telebot
from telebot import types
import config
from mysqlAPI import DBConnect, StateType
import time

bot = telebot.TeleBot(config.TOKEN, parse_mode=None)
DBController = DBConnect()
userDict = {}

class User:
	def __init__(self, name):
		self.name = name
		self.surname = None
		self.email = None

@bot.message_handler(commands=['start'])
def send_welcome(message):

	userId = message.from_user.id

	if (DBController.isUserExist(userId)):
		userName = DBController.getUserName(userId)
		text = "–ü—Ä–∏–≤–µ—Ç, " + userName + "!\n–ú—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º üòä"
		bot.send_message(userId, text)
		printMenu(message)
		return

	text = """\
–ü—Ä–∏–≤–µ—Ç, –º–Ω–µ –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –æ —Ç–µ–±–µ. 
–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?
"""
	msg = bot.send_message(message.chat.id, text)
	bot.register_next_step_handler(msg, process_name_step)

def isStringValid(inputString):
	contains_digit = any(map(str.isdigit, inputString))
	text_len = [len(x) for x in inputString.split()]
	lenQu = max(text_len) / min(text_len)
	return (not contains_digit) and (lenQu == 1)

def process_name_step(message):
	try:
		chatId = message.chat.id
		name = message.text
		if message.content_type != "text" or not isStringValid(name):
			msg = bot.send_message(chatId, "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –∏–º–µ–Ω–µ–º, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è –µ—â–µ —Ä–∞–∑ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
			bot.register_next_step_handler(msg, process_name_step)
			return
		user = User(name.title())
		userDict[chatId] = user
		msg = bot.send_message(chatId, "–ü—Ä–∏–≤–µ—Ç "+ user.name +", –∫–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?")
		bot.register_next_step_handler(msg, process_surname_step)
	except Exception as e:
		bot.send_message(message.chat.id, "–û–≥–æ, —Ç—ã —Å–º–æ–≥ —Å–ª–æ–º–∞—Ç—å –º–µ–Ω—è, –Ω–∞—á–∏–Ω–∞–π –∑–∞–Ω–æ–≤–æ –∏ –Ω–µ –Ω–∞–¥–æ —Ç–∞–∫ –±–æ–ª—å—à–µ –¥–µ–ª–∞—Ç—å")

def process_surname_step(message):
	try:
		chatId = message.chat.id
		surname = message.text
		if message.content_type != "text" or not isStringValid(surname):
			msg = bot.send_message(chatId, "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Ñ–∞–º–∏–ª–∏–µ–π, –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –µ—â–µ —Ä–∞–∑ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
			bot.register_next_step_handler(msg, process_surname_step)
			return
		user = userDict[chatId]
		user.surname = surname.title()
		msg = bot.send_message(chatId, "–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫–æ—Ä–ø–∞—Ä–∞—Ç–∏–≤–Ω—ã–π Email")
		bot.register_next_step_handler(msg, process_email_step)
	except Exception as e:
		bot.send_message(message.chat.id, "–û–≥–æ, —Ç—ã —Å–º–æ–≥ —Å–ª–æ–º–∞—Ç—å –º–µ–Ω—è, –Ω–∞—á–∏–Ω–∞–π –∑–∞–Ω–æ–≤–æ –∏ –Ω–µ –Ω–∞–¥–æ —Ç–∞–∫ –±–æ–ª—å—à–µ –¥–µ–ª–∞—Ç—å")
	
def process_email_step(message):
	try:
		chatId = message.chat.id
		email = message.text
		if message.content_type != "text":
			msg = bot.send_message(chatId, "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç! –î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π")
			bot.register_next_step_handler(msg, process_email_step)
			return
		user = userDict[chatId]
		user.email = email
		DBController.addUser(chatId, user.name, user.surname, user.email)
		del userDict[chatId]
		bot.send_message(chatId, "–¢—ã –≤ —Å–∏—Å—Ç–µ–º–µ üòé")
		bot.send_message(chatId, "–¢–µ–ø–µ—Ä—å –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ–±—è, —è –º–æ–≥—É —Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ç–≤–æ–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞ –∏ —É—Ö–æ–¥–∞, –≤—Ä–µ–º—è —Ç–≤–æ–µ–≥–æ –æ–±–µ–¥–∞ –∏ –¥–∞–∂–µ —Å—Ç—Ä–æ–∏—Ç—å –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç!")
		bot.send_message(chatId, "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã –ø—Ä–∏–¥–µ—à—å –∏–ª–∏ —É–π–¥–µ—à—å —Å —Ä–∞–±–æ—Ç—ã - –æ–ø–æ–≤–µ—Å—Ç–∏ –º–µ–Ω—è –æ–± —ç—Ç–æ–º! (–≤–æ–∑–º–æ–∂–Ω–æ –≤ –±—É–¥—É—â–µ–º —è –Ω–∞—É—á—É—Å—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º)")
		printMenu(message)
	except Exception as e:
		print(e)
		bot.send_message(message.chat.id, "–û–≥–æ, —Ç—ã —Å–º–æ–≥ —Å–ª–æ–º–∞—Ç—å –º–µ–Ω—è, –Ω–∞—á–∏–Ω–∞–π –∑–∞–Ω–æ–≤–æ –∏ –Ω–µ –Ω–∞–¥–æ —Ç–∞–∫ –±–æ–ª—å—à–µ –¥–µ–ª–∞—Ç—å")

def printMenu(message):
	markup = types.ReplyKeyboardMarkup(selective=False, resize_keyboard=True)
	come = types.KeyboardButton('–ü—Ä–∏—à–µ–ª')
	gone = types.KeyboardButton('–£—à–µ–ª') 
	markup.row(come, gone)
	msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)
	bot.register_next_step_handler(msg, process_new_task)

@bot.message_handler(commands=['file'])
def showButton(message):
	doc = open('test.xlsx', 'rb')
	bot.send_document(message.from_user.id, doc)
	markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
	itembtn1 = types.KeyboardButton('/file')
	markup.add(itembtn1)
	bot.reply_to(message, "Choose one letter:", reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def process_new_task(message):
	if (message.content_type != "text"):
		return
	
	case = message.text

	if (case == "–ü—Ä–∏—à–µ–ª"):
		process_come_task(message)
	elif (case == "–£—à–µ–ª"):
		process_gone_task(message)


def process_come_task(message):
	userId = message.from_user.id
	if (DBController.getLastTask(userId) != StateType.Gone.id):
		msg = bot.send_message(message.chat.id, '(–¢—ã —É–∂–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ)')
		return
	
	DBController.setUserCome(userId)
	msg = bot.send_message(message.chat.id, '–£–¥–∞—á–Ω–æ–≥–æ —Ç–µ–±–µ –¥–Ω—è!')
	bot.register_next_step_handler(msg, process_new_task)

def process_gone_task(message):
	userId = message.from_user.id
	if (DBController.getLastTask(userId) != StateType.Come.id):
		msg = bot.send_message(message.chat.id, '(–¢—ã —É–∂–µ —É—à–µ–ª)')
		return
	
	comeTime = DBController.getTimeLastTask(message.from_user.id)
	deltaTime = datetime.now() - comeTime
	if (deltaTime < timedelta(seconds=5)):
		show_mistake_action(message)
		return

	text = message.text

	if not text.isdigit():
		process_dinner_time(message)
		return
		
	recordId = DBController.setUserGone(message.from_user.id)
	DBController.setSpendTimeForDinner(message.from_user.id, recordId, int(text))

	workingTime = datetime.now() - comeTime - timedelta(minutes=int(text))

	bot.send_message(message.chat.id, f'–¢—ã —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Ä–∞–±–æ—Ç–∞–ª {workingTime.seconds // 3600} —á–∞—Å–æ–≤ {(workingTime.seconds // 60) % 60} –º–∏–Ω—É—Ç')
	bot.send_message(message.chat.id, f'–ü—Ä–∏—à–µ–ª –≤ {comeTime.hour}:{comeTime.minute}')
	bot.send_message(message.chat.id, f'–£—à–µ–ª –≤ {datetime.now().hour}:{datetime.now().minute}')
	msg = bot.send_message(message.chat.id, '–ü–æ–∫–∞!')
	printMenu(message)

def process_dinner_time(message):
	markup = types.ReplyKeyboardRemove(selective=False)
	msg = bot.send_message(message.chat.id, '–û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å, –ø–æ–∫–∞ —Ç—ã –Ω–µ —É—à–µ–ª, —Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª –≤—Ä–µ–º—è –Ω–∞ –æ–±–µ–¥ (–≤ –º–∏–Ω—É—Ç–∞—Ö)', reply_markup=markup)
	bot.register_next_step_handler(msg, process_gone_task)
	return


def show_mistake_action(message):
	markup = types.ReplyKeyboardMarkup(selective=False, resize_keyboard=True,)
	yes = types.KeyboardButton('–î–∞')
	no = types.KeyboardButton('–ù–µ—Ç') 
	markup.row(yes, no)
	bot.send_message(message.chat.id, '–î—É–º–∞—é —Ç—ã –Ω–∞–∂–∞–ª —Å–ª—É—á–∞–π–Ω–æ')
	msg = bot.send_message(message.chat.id, '–¢—ã —Ç–æ—á–Ω–æ —É—à–µ–ª –¥–æ–º–æ–π?', reply_markup=markup)
	bot.register_next_step_handler(msg, process_mistake_action)

def process_mistake_action(message):
	if (message.content_type != "text"):
		return
	
	case = message.text

	if case == "–î–∞":
		bot.send_message(message.chat.id, '–Ø —É–¥–∞–ª—é —Ç–≤–æ—é —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –æ —Ç–≤–æ–µ–º –ø—Ä–∏—Ö–æ–¥–µ, —Ç–∞–∫ –∫–∞–∫ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø—Ä–æ—à–ª–æ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏')
		DBController.deleteLastTask(message.chat.id)
	elif case == "–ù–µ—Ç":
		bot.send_message(message.chat.id, '–í—Å–µ –Ω–æ—Ä–º, —Å–¥–µ–ª–∞–µ–º –≤–∏–¥, —á—Ç–æ —ç—Ç–æ–≥–æ –Ω–µ –±—ã–ª–æ')
	else:
		bot.send_message(message.chat.id, '–Ø —Ç–æ–ª—å–∫–æ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
		process_mistake_action(message)
		return
	printMenu(message)

@bot.message_handler(commands=['test'])
def getId(message):
	user = message.from_user.id
	print(user)
	markup = types.ReplyKeyboardMarkup(row_width=2)
	itembtn1 = types.KeyboardButton('/test')
	markup.add(itembtn1)
	bot.reply_to(message, "hueta123", reply_markup=markup)

if __name__ == "__main__":
	while True:
		try:
			bot.polling(none_stop=True, timeout=30)
		except:
			print("Bot restart")
			time.sleep(15)

